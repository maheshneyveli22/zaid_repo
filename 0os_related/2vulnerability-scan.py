import platform
import subprocess
import os

def scan_vulnerabilities():
    """Scans for potential vulnerabilities based on the operating system."""

    os_name = platform.system()

    if os_name == "Windows":
        return _scan_windows_vulnerabilities()
    elif os_name == "Linux":
        return _scan_linux_vulnerabilities()
    elif os_name == "Darwin":  # macOS
        return _scan_macos_vulnerabilities()
    else:
        return f"Unsupported operating system: {os_name}"

def _scan_windows_vulnerabilities():
    """Basic vulnerability scan for Windows (requires external tools for comprehensive scanning)."""
    try:
        # Example: Check for missing Windows updates (very basic)
        result = subprocess.run(["wmic", "qfe", "list", "brief"], capture_output=True, text=True)
        if result.returncode == 0:
            output = result.stdout
            if "KB" not in output:
                return "Potentially missing Windows updates (basic check)."
            else:
                return "Windows updates appear to be installed (basic check)."
        else:
            return f"Error checking Windows updates: {result.stderr}"

    except Exception as e:
        return f"Error scanning Windows vulnerabilities: {e}"

def _scan_linux_vulnerabilities():
    """Basic vulnerability scan for Linux (requires external tools like OpenVAS/Nessus for proper scanning)."""
    try:
        # Example: Check for outdated packages (basic check)
        if os.path.exists("/usr/bin/apt"): #Debian/Ubuntu
            result = subprocess.run(["apt", "list", "--upgradable"], capture_output=True, text=True)
            if result.returncode == 0:
                if "packages can be upgraded" in result.stdout:
                    return "Outdated packages found (basic check). Use 'sudo apt upgrade'."
                else:
                    return "Packages appear to be up-to-date (basic check)."
            else:
                return f"Error checking for outdated packages: {result.stderr}"
        elif os.path.exists("/usr/bin/yum") or os.path.exists("/usr/bin/dnf"): #RedHat/Fedora
            result = subprocess.run(["dnf","check-update"], capture_output=True, text=True) #dnf is the newer version of yum.
            if result.returncode == 0:
                if len(result.stdout) > 0:
                    return "Outdated packages found (basic check). Use 'sudo dnf update'."
                else:
                    return "Packages appear to be up-to-date (basic check)."
            else:
                return f"Error checking for outdated packages: {result.stderr}"
        elif os.path.exists("/usr/bin/pacman"): #Arch Linux
            result = subprocess.run(["pacman", "-Qu"], capture_output=True, text=True)
            if result.returncode == 0:
                if len(result.stdout) > 0:
                    return "Outdated packages found (basic check). Use 'sudo pacman -Syu'."
                else:
                    return "Packages appear to be up-to-date (basic check)."
            else:
                return f"Error checking for outdated packages: {result.stderr}"

        else:
            return "Package manager not found. Please install a package manager."

    except Exception as e:
        return f"Error scanning Linux vulnerabilities: {e}"

def _scan_macos_vulnerabilities():
    """Basic vulnerability scan for macOS (requires external tools like OpenVAS/Nessus for proper scanning)."""
    try:
        # Example: Check for software updates (very basic)
        result = subprocess.run(["softwareupdate", "-l"], capture_output=True, text=True)
        if result.returncode == 0:
            if "Software Update:" in result.stdout:
                return "Software updates available (basic check)."
            else:
                return "Software appears to be up-to-date (basic check)."
        else:
            return f"Error checking for software updates: {result.stderr}"

    except Exception as e:
        return f"Error scanning macOS vulnerabilities: {e}"

if __name__ == "__main__":
    vulnerability_report = scan_vulnerabilities()
    print(vulnerability_report)